/* Um programa para calcular o mdc
   segundo o algoritmo de Euclides. */

int gcd (int u, int v)
{
	if (v == 0){ return u; }
	else{ return gcd(v,u-u/v*v);}

	/* u-u/v*v == u mod v */
}

void main(void)
{	int x; int y;
	x = input(); y = input();
	output(gcd(x,y));
}

/*Código intermediário:*/

0  : (function, gcd, , ) 
1  : (equal_to, v, 0, t1) 
2  : (jump_if_false, t1, L1, ) 
3  : (return, u, , ) 
4  : (go_to, L2, , ) 
5  : (label, L1, , ) 
6  : (arg, v, , ) 
7  : (division, u, v, t2) 
8  : (multiplication, t2, v, t3) 
9  : (subtraction, u, t3, t4) 
10  : (arg, t4, , ) 
11  : (function_call, gcd, 2, ) 
12  : (assign_ret, t5, RT, ) 
13  : (return, t5, , ) 
14  : (label, L2, , ) 
15  : (return, 0, , ) 
16  : (function, main, , ) 
17  : (sys_call, input, , ) 
18  : (assign_ret, t6, RT, ) 
19  : (assign, x, t6, ) 
20  : (sys_call, input, , ) 
21  : (assign_ret, t7, RT, ) 
22  : (assign, y, t7, ) 
23  : (arg, x, , ) 
24  : (arg, y, , ) 
25  : (function_call, gcd, 2, ) 
26  : (assign_ret, t8, RT, ) 
27  : (arg, t8, , ) 
28  : (sys_call, output, 1, ) 

/* Assembly: */

     0: loadi $r0 0
     1: loadi $stp 0
     2: loadi $ra 0
     3: jmpi main
gcd:
     4: subi $stp $stp 1
     5: pop $r1 $stp
     6: loadi $rl 0
     7: store $r1 $rl
     8: subi $stp $stp 1
     9: pop $r1 $stp
     10: loadi $rl 1
     11: store $r1 $rl
     12: loadi $rl 1
     13: load $r1 $rl
     14: loadi $r2 0
     15: eq $r3 $r1 $r2
     16: jei $r0 $r3 L1
     17: loadi $r1 0
     18: load $rt $r1
     19: jmp $ra
     20: jmpi L2
L1.
     21: loadi $rl 0
     22: load $r1 $rl
     23: loadi $rl 1
     24: load $r2 $rl
     25: div $r3 $r1 $r2
     26: loadi $rl 1
     27: load $r1 $rl
     28: mult $r2 $r3 $r1
     29: loadi $rl 0
     30: load $r1 $rl
     31: sub $r3 $r1 $r2
     32: push $ra $stp
     33: addi $stp $stp 1
     34: loadi $rl 0
     35: load $r1 $rl
     36: push $r1 $stp
     37: addi $stp $stp 1
     38: loadi $rl 1
     39: load $r1 $rl
     40: push $r1 $stp
     41: addi $stp $stp 1
     42: push $r3 $stp
     43: addi $stp $stp 1
     44: loadi $rl 1
     45: load $r1 $rl
     46: push $r1 $stp
     47: addi $stp $stp 1
     48: jal gcd
     49: subi $stp $stp 1
     50: pop $r1 $stp
     51: loadi $rl 1
     52: store $r1 $rl
     53: subi $stp $stp 1
     54: pop $r1 $stp
     55: loadi $rl 0
     56: store $r1 $rl
     57: subi $stp $stp 1
     58: pop $ra $stp
     59: move $r1 $rt
     60: move $rt $r1
     61: jmp $ra
L2.
     62: loadi $rt 0
     63: jmp $ra
main:
     64: in $rt
     65: move $r1 $rt
     66: loadi $r2 2
     67: store $r1 $r2
     68: in $rt
     69: move $r1 $rt
     70: loadi $r2 3
     71: store $r1 $r2
     72: push $ra $stp
     73: addi $stp $stp 1
     74: loadi $rl 3
     75: load $r1 $rl
     76: push $r1 $stp
     77: addi $stp $stp 1
     78: loadi $rl 2
     79: load $r1 $rl
     80: push $r1 $stp
     81: addi $stp $stp 1
     82: jal gcd
     83: subi $stp $stp 1
     84: pop $ra $stp
     85: move $r1 $rt
     86: out $r1

/* conjunto de instruções em binário:*/

mem_ram[0] = 32'b001101_00000_000000000000000000000; //['loadi', '$r0', '0']
mem_ram[1] = 32'b001101_11101_000000000000000000000; //['loadi', '$r29', '0']
mem_ram[2] = 32'b001101_11111_000000000000000000000; //['loadi', '$r31', '0']
mem_ram[3] = 32'b010000_00000_000000000000001000000; //['jmpi', 'main']
mem_ram[4] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[5] = 32'b100100_00001_11101_0000000000000000; //['pop', '$r1', '$r29']
mem_ram[6] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[7] = 32'b001110_00001_11110_0000000000000000; //['store', '$r1', '$r30']
mem_ram[8] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[9] = 32'b100100_00001_11101_0000000000000000; //['pop', '$r1', '$r29']
mem_ram[10] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[11] = 32'b001110_00001_11110_0000000000000000; //['store', '$r1', '$r30']
mem_ram[12] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[13] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[14] = 32'b001101_00010_000000000000000000000; //['loadi', '$r2', '0']
mem_ram[15] = 32'b011011_00011_00001_00010_00000000000; //['eq', '$r3', '$r1', '$r2']
mem_ram[16] = 32'b100010_00000_00011_0000000000010101; //['jei', '$r0', '$r3', 'L1']
mem_ram[17] = 32'b001101_00001_000000000000000000000; //['loadi', '$r1', 0]
mem_ram[18] = 32'b001100_11100_00001_0000000000000000; //['load', '$r28', '$r1']
mem_ram[19] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[20] = 32'b010000_00000_000000000000000111110; //['jmpi', 'L2']
mem_ram[21] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[22] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[23] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[24] = 32'b001100_00010_11110_0000000000000000; //['load', '$r2', '$r30']
mem_ram[25] = 32'b011010_00011_00001_00010_00000000000; //['div', '$r3', '$r1', '$r2']
mem_ram[26] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[27] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[28] = 32'b000101_00010_00011_00001_00000000000; //['mult', '$r2', '$r3', '$r1']
mem_ram[29] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[30] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[31] = 32'b000011_00011_00001_00010_00000000000; //['sub', '$r3', '$r1', '$r2']
mem_ram[32] = 32'b100011_11111_11101_0000000000000000; //['push', '$r31', '$r29']
mem_ram[33] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[34] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[35] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[36] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[37] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[38] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[39] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[40] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[41] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[42] = 32'b100011_00011_11101_0000000000000000; //['push', '$r3', '$r29']
mem_ram[43] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[44] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[45] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[46] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[47] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[48] = 32'b100001_00000000000000000000000100; //['jal', 'gcd']
mem_ram[49] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[50] = 32'b100100_00001_11101_0000000000000000; //['pop', '$r1', '$r29']
mem_ram[51] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[52] = 32'b001110_00001_11110_0000000000000000; //['store', '$r1', '$r30']
mem_ram[53] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[54] = 32'b100100_00001_11101_0000000000000000; //['pop', '$r1', '$r29']
mem_ram[55] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[56] = 32'b001110_00001_11110_0000000000000000; //['store', '$r1', '$r30']
mem_ram[57] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[58] = 32'b100100_11111_11101_0000000000000000; //['pop', '$r31', '$r29']
mem_ram[59] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[60] = 32'b001111_11100_00001_0000000000000000; //['move', '$r28', '$r1']
mem_ram[61] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[62] = 32'b001101_11100_000000000000000000000; //['loadi', '$r28', '0']
mem_ram[63] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[64] = 32'b010110_11100_000000000000000000000; //['in', '$r28']
mem_ram[65] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[66] = 32'b001101_00010_000000000000000000010; //['loadi', '$r2', 2]
mem_ram[67] = 32'b001110_00001_00010_0000000000000000; //['store', '$r1', '$r2']
mem_ram[68] = 32'b010110_11100_000000000000000000000; //['in', '$r28']
mem_ram[69] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[70] = 32'b001101_00010_000000000000000000011; //['loadi', '$r2', 3]
mem_ram[71] = 32'b001110_00001_00010_0000000000000000; //['store', '$r1', '$r2']
mem_ram[72] = 32'b100011_11111_11101_0000000000000000; //['push', '$r31', '$r29']
mem_ram[73] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[74] = 32'b001101_11110_000000000000000000011; //['loadi', '$r30', 3]
mem_ram[75] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[76] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[77] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[78] = 32'b001101_11110_000000000000000000010; //['loadi', '$r30', 2]
mem_ram[79] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[80] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[81] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[82] = 32'b100001_00000000000000000000000100; //['jal', 'gcd']
mem_ram[83] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[84] = 32'b100100_11111_11101_0000000000000000; //['pop', '$r31', '$r29']
mem_ram[85] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[86] = 32'b010111_00001_000000000000000000000; //['out', '$r1']
