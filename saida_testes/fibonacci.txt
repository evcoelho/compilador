int fibonacci(int n){
    int a; int b; int c; int i;
    if (n <= 0){ return 0;}
    else{ if (n == 1){ return 1;}
    else {
        a = 0;
        b = 1;
        i = 1;
        while (i < n){
            c = b;
            b = b + a;
            a = c;
            i = i + 1;
        }
        return b;
     }
    }
}


void main(void)
{	int x;
	x = input();
	output(fibonacci(x));
}

/*Código intermediário:*/

0  : (function, fibonacci, , ) 
1  : (less_than_equal_to, n, 0, t1) 
2  : (jump_if_false, t1, L1, ) 
3  : (return, 0, , ) 
4  : (go_to, L2, , ) 
5  : (label, L1, , ) 
6  : (equal_to, n, 1, t2) 
7  : (jump_if_false, t2, L3, ) 
8  : (return, 1, , ) 
9  : (go_to, L4, , ) 
10  : (label, L3, , ) 
11  : (assign, a, 0, ) 
12  : (assign, b, 1, ) 
13  : (assign, i, 1, ) 
14  : (label, L5, , ) 
15  : (less_than, i, n, t3) 
16  : (jump_if_false, t3, L6, ) 
17  : (assign, c, b, ) 
18  : (addition, b, a, t4) 
19  : (assign, b, t4, ) 
20  : (assign, a, c, ) 
21  : (addition, i, 1, t5) 
22  : (assign, i, t5, ) 
23  : (go_to, L5, , ) 
24  : (label, L6, , ) 
25  : (return, b, , ) 
26  : (label, L4, , ) 
27  : (label, L2, , ) 
28  : (return, 0, , ) 
29  : (function, main, , ) 
30  : (sys_call, input, , ) 
31  : (assign_ret, t6, RT, ) 
32  : (assign, x, t6, ) 
33  : (arg, x, , ) 
34  : (function_call, fibonacci, 1, ) 
35  : (assign_ret, t7, RT, ) 
36  : (arg, t7, , ) 
37  : (sys_call, output, 1, ) 

/* Assembly: */

     0: loadi $r0 0
     1: loadi $stp 0
     2: loadi $ra 0
     3: jmpi main
fibonacci:
     4: subi $stp $stp 1
     5: pop $r1 $stp
     6: loadi $rl 0
     7: store $r1 $rl
     8: loadi $rl 0
     9: load $r1 $rl
     10: loadi $r2 0
     11: nab $r3 $r1 $r2
     12: jei $r0 $r3 L1
     13: loadi $rt 0
     14: jmp $ra
     15: jmpi L2
L1.
     16: loadi $rl 0
     17: load $r1 $rl
     18: loadi $r2 1
     19: eq $r3 $r1 $r2
     20: jei $r0 $r3 L3
     21: loadi $rt 1
     22: jmp $ra
     23: jmpi L4
L3.
     24: loadi $r1 1
     25: loadi $r2 0
     26: store $r2 $r1
     27: loadi $r1 2
     28: loadi $r2 1
     29: store $r2 $r1
     30: loadi $r1 4
     31: loadi $r2 1
     32: store $r2 $r1
L5.
     33: loadi $rl 4
     34: load $r1 $rl
     35: loadi $rl 0
     36: load $r2 $rl
     37: lt $r3 $r1 $r2
     38: jei $r0 $r3 L6
     39: loadi $r1 3
     40: loadi $rl 2
     41: load $r2 $rl
     42: store $r2 $r1
     43: loadi $rl 2
     44: load $r1 $rl
     45: loadi $rl 1
     46: load $r2 $rl
     47: add $r3 $r1 $r2
     48: loadi $r1 2
     49: store $r3 $r1
     50: loadi $r1 1
     51: loadi $rl 3
     52: load $r2 $rl
     53: store $r2 $r1
     54: loadi $rl 4
     55: load $r1 $rl
     56: loadi $r2 1
     57: add $r3 $r1 $r2
     58: loadi $r1 4
     59: store $r3 $r1
     60: jmpi L5
L6.
     61: loadi $r1 2
     62: load $rt $r1
     63: jmp $ra
L4.
L2.
     64: loadi $rt 0
     65: jmp $ra
main:
     66: in $rt
     67: move $r1 $rt
     68: loadi $r2 5
     69: store $r1 $r2
     70: push $ra $stp
     71: addi $stp $stp 1
     72: loadi $rl 5
     73: load $r1 $rl
     74: push $r1 $stp
     75: addi $stp $stp 1
     76: jal fibonacci
     77: subi $stp $stp 1
     78: pop $ra $stp
     79: move $r1 $rt
     80: out $r1

/* conjunto de instruções em binário:*/

mem_ram[0] = 32'b001101_00000_000000000000000000000; //['loadi', '$r0', '0']
mem_ram[1] = 32'b001101_11101_000000000000000000000; //['loadi', '$r29', '0']
mem_ram[2] = 32'b001101_11111_000000000000000000000; //['loadi', '$r31', '0']
mem_ram[3] = 32'b010000_00000_000000000000001000010; //['jmpi', 'main']
mem_ram[4] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[5] = 32'b100100_00001_11101_0000000000000000; //['pop', '$r1', '$r29']
mem_ram[6] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[7] = 32'b001110_00001_11110_0000000000000000; //['store', '$r1', '$r30']
mem_ram[8] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[9] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[10] = 32'b001101_00010_000000000000000000000; //['loadi', '$r2', '0']
mem_ram[11] = 32'b011110_00011_00001_00010_00000000000; //['nab', '$r3', '$r1', '$r2']
mem_ram[12] = 32'b100010_00000_00011_0000000000010000; //['jei', '$r0', '$r3', 'L1']
mem_ram[13] = 32'b001101_11100_000000000000000000000; //['loadi', '$r28', '0']
mem_ram[14] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[15] = 32'b010000_00000_000000000000001000000; //['jmpi', 'L2']
mem_ram[16] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[17] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[18] = 32'b001101_00010_000000000000000000001; //['loadi', '$r2', '1']
mem_ram[19] = 32'b011011_00011_00001_00010_00000000000; //['eq', '$r3', '$r1', '$r2']
mem_ram[20] = 32'b100010_00000_00011_0000000000011000; //['jei', '$r0', '$r3', 'L3']
mem_ram[21] = 32'b001101_11100_000000000000000000001; //['loadi', '$r28', '1']
mem_ram[22] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[23] = 32'b010000_00000_000000000000001000000; //['jmpi', 'L4']
mem_ram[24] = 32'b001101_00001_000000000000000000001; //['loadi', '$r1', 1]
mem_ram[25] = 32'b001101_00010_000000000000000000000; //['loadi', '$r2', '0']
mem_ram[26] = 32'b001110_00010_00001_0000000000000000; //['store', '$r2', '$r1']
mem_ram[27] = 32'b001101_00001_000000000000000000010; //['loadi', '$r1', 2]
mem_ram[28] = 32'b001101_00010_000000000000000000001; //['loadi', '$r2', '1']
mem_ram[29] = 32'b001110_00010_00001_0000000000000000; //['store', '$r2', '$r1']
mem_ram[30] = 32'b001101_00001_000000000000000000100; //['loadi', '$r1', 4]
mem_ram[31] = 32'b001101_00010_000000000000000000001; //['loadi', '$r2', '1']
mem_ram[32] = 32'b001110_00010_00001_0000000000000000; //['store', '$r2', '$r1']
mem_ram[33] = 32'b001101_11110_000000000000000000100; //['loadi', '$r30', 4]
mem_ram[34] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[35] = 32'b001101_11110_000000000000000000000; //['loadi', '$r30', 0]
mem_ram[36] = 32'b001100_00010_11110_0000000000000000; //['load', '$r2', '$r30']
mem_ram[37] = 32'b011111_00011_00001_00010_00000000000; //['lt', '$r3', '$r1', '$r2']
mem_ram[38] = 32'b100010_00000_00011_0000000000111101; //['jei', '$r0', '$r3', 'L6']
mem_ram[39] = 32'b001101_00001_000000000000000000011; //['loadi', '$r1', 3]
mem_ram[40] = 32'b001101_11110_000000000000000000010; //['loadi', '$r30', 2]
mem_ram[41] = 32'b001100_00010_11110_0000000000000000; //['load', '$r2', '$r30']
mem_ram[42] = 32'b001110_00010_00001_0000000000000000; //['store', '$r2', '$r1']
mem_ram[43] = 32'b001101_11110_000000000000000000010; //['loadi', '$r30', 2]
mem_ram[44] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[45] = 32'b001101_11110_000000000000000000001; //['loadi', '$r30', 1]
mem_ram[46] = 32'b001100_00010_11110_0000000000000000; //['load', '$r2', '$r30']
mem_ram[47] = 32'b000001_00011_00001_00010_00000000000; //['add', '$r3', '$r1', '$r2']
mem_ram[48] = 32'b001101_00001_000000000000000000010; //['loadi', '$r1', 2]
mem_ram[49] = 32'b001110_00011_00001_0000000000000000; //['store', '$r3', '$r1']
mem_ram[50] = 32'b001101_00001_000000000000000000001; //['loadi', '$r1', 1]
mem_ram[51] = 32'b001101_11110_000000000000000000011; //['loadi', '$r30', 3]
mem_ram[52] = 32'b001100_00010_11110_0000000000000000; //['load', '$r2', '$r30']
mem_ram[53] = 32'b001110_00010_00001_0000000000000000; //['store', '$r2', '$r1']
mem_ram[54] = 32'b001101_11110_000000000000000000100; //['loadi', '$r30', 4]
mem_ram[55] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[56] = 32'b001101_00010_000000000000000000001; //['loadi', '$r2', '1']
mem_ram[57] = 32'b000001_00011_00001_00010_00000000000; //['add', '$r3', '$r1', '$r2']
mem_ram[58] = 32'b001101_00001_000000000000000000100; //['loadi', '$r1', 4]
mem_ram[59] = 32'b001110_00011_00001_0000000000000000; //['store', '$r3', '$r1']
mem_ram[60] = 32'b010000_00000_000000000000000100001; //['jmpi', 'L5']
mem_ram[61] = 32'b001101_00001_000000000000000000010; //['loadi', '$r1', 2]
mem_ram[62] = 32'b001100_11100_00001_0000000000000000; //['load', '$r28', '$r1']
mem_ram[63] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[64] = 32'b001101_11100_000000000000000000000; //['loadi', '$r28', '0']
mem_ram[65] = 32'b010001_11111_000000000000000000000; //['jmp', '$r31']
mem_ram[66] = 32'b010110_11100_000000000000000000000; //['in', '$r28']
mem_ram[67] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[68] = 32'b001101_00010_000000000000000000101; //['loadi', '$r2', 5]
mem_ram[69] = 32'b001110_00001_00010_0000000000000000; //['store', '$r1', '$r2']
mem_ram[70] = 32'b100011_11111_11101_0000000000000000; //['push', '$r31', '$r29']
mem_ram[71] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[72] = 32'b001101_11110_000000000000000000101; //['loadi', '$r30', 5]
mem_ram[73] = 32'b001100_00001_11110_0000000000000000; //['load', '$r1', '$r30']
mem_ram[74] = 32'b100011_00001_11101_0000000000000000; //['push', '$r1', '$r29']
mem_ram[75] = 32'b000010_11101_11101_0000000000000001; //['addi', '$r29', '$r29', '1']
mem_ram[76] = 32'b100001_00000000000000000000000100; //['jal', 'fibonacci']
mem_ram[77] = 32'b000100_11101_11101_0000000000000001; //['subi', '$r29', '$r29', '1']
mem_ram[78] = 32'b100100_11111_11101_0000000000000000; //['pop', '$r31', '$r29']
mem_ram[79] = 32'b001111_00001_11100_0000000000000000; //['move', '$r1', '$r28']
mem_ram[80] = 32'b010111_00001_000000000000000000000; //['out', '$r1']
mem_ram[81] = 32'b011001_00000000000000000000000000; // halt
